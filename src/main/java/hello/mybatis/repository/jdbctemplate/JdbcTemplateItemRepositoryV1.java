package hello.mybatis.repository.jdbctemplate;

import hello.mybatis.domain.Item;
import hello.mybatis.repository.ItemRepository;
import hello.mybatis.repository.ItemSearchCond;
import hello.mybatis.repository.ItemUpdateDto;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.util.StringUtils;

import javax.sql.DataSource;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


/**
 * JDBC Template
 */
@Slf4j
public class JdbcTemplateItemRepositoryV1 implements ItemRepository {
    private final JdbcTemplate jdbcTemplate;

    public JdbcTemplateItemRepositoryV1(DataSource dataSource) {
        // JdbcTemplate의 경우 DataSource가 필요하다.
        // config 에 설정파일을 정의해두었다.
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }


    /**
     * 회원저장
     *
     * @param item
     * @return Item
     */
    @Override
    public Item save(Item item) {
        String sql = "insert into item(item_name , price , quantity) values(?,?,?)";

        /**
         * generated by default as identity => id
         * db의 각 데이터의 pk는 자동으로 생성되게 설정해놨다.
         * 이 pk정보를 가져오기 위해서 keyHolder를 사용한다.
         */


        // generated by default as identity => 즉 DB쪽에서 자동으로 생성해주는 id값이다.
        // KeyHolder 와 connection.prepareStatement(sql, new String[]{"id"}) 를 사용해서 id 를
        // 지정해주면 INSERT 쿼리 실행 이후에 데이터베이스에서 생성된 ID 값을 조회할 수 있다.
        KeyHolder keyHolder = new GeneratedKeyHolder();

        // jdbcTemplate의 메소드에는 update와 queryForObejct가 있다.
        // queryForObject의 경우 쿼리를 조회하는 데 주로 사용하고 그 외는 update메소드를 사용한다 생각하면 편한다.
        this.jdbcTemplate.update(con -> {
            PreparedStatement pstmt = con.prepareStatement(sql, new String[]{"id"});
            pstmt.setString(1, item.getItemName());
            pstmt.setInt(2, item.getPrice());
            pstmt.setInt(3, item.getQuantity());
            return pstmt;
        }, keyHolder);

        long key = keyHolder.getKey().longValue();

        // item domain에는 id가 있다.
        // 하지만 id(pk)는 db가 직접 생성하기 떄문에 id를 가져와서 item에 개발자가 넣어주는 코드를 작성해줘야한다.
        // 위의 작업이 결국 아래의 item.setId(key)를 해주기 위해서 사용한 코드이다.
        item.setId(key);

        return item;
    }


    /**
     * 회원 업데이트 메소드
     *
     * @param itemId
     * @param updateParam
     */
    @Override
    public void update(Long itemId, ItemUpdateDto updateParam) {
        String sql = "update item set item_name=? , price=? , quantity=? where id = ?";
        // 아래의 update 메소드의 파라미터는 sql , args(가변인자)를 받는다.
        // sql파라미터 이후 sql 바인딩 변수의 순서에 맞게 들어간다.
        this.jdbcTemplate.update(sql, updateParam.getItemName(), updateParam.getPrice(), updateParam.getQuantity(), itemId);
    }

    /**
     * 찾고자하는 아이템 객체를 반환해주는 메소드이다. <br>
     * ResultSet을 Item domain을 그대로 받기 위해서 RowMapper를 사용한다.<br><br>
     *
     * @param id
     * @return Optional
     */

    @Override
    public Optional<Item> findById(Long id) {
        String sql = "select id , item_name , price , quantity from item where id = ?";

        // queryForObject => 결과 Row가 하나일때 사용
        // query => 결과 Row가 1개 이상일 떄 사용
        // 아이디 찾기는 결과 Row가 하나이기 때문에 queryForObject를 사용한다.
        // itemRowMapper는 해당 메소드에 주석을 달아두었다.
        try {
            Item item = this.jdbcTemplate.queryForObject(sql, itemRowMapper(), id);
            //Optional.of는 값이 없다면 NullpointerException 반환 때문에 try-catch로 감싸준다.
            return Optional.of(item);
        } catch (EmptyResultDataAccessException e) {
            // 반환 값이 없다면 Optinal로 감싸서 empty를 반환하도록 예외를 잡는다.
            // 참고로 RuntimeException 이다.
            // RuntimeException인 이유는 전에 공부했듯이 checkedException인 경우 jdbc에 종속적인 코드가 되기 때문이다.
            return Optional.empty();
        }
    }


    @Override
    public List<Item> findAll(ItemSearchCond cond) {
        String sql = "select id, item_name , price , quantity from item";
        String itemName = cond.getItemName();
        Integer maxPrice = cond.getMaxPrice();

        if (StringUtils.hasText(itemName) || maxPrice != null) {
            sql += " where";
        }
        boolean andFlag = false;
        List<Object> param = new ArrayList<>();
        if (StringUtils.hasText(itemName)) {
            sql += " item_name like concat('%',?,'%')";
            param.add(itemName);
            andFlag = true;
        }
        if (maxPrice != null) {
            if (andFlag) {
                sql += " and";
            }
            sql += " price <= ?";
            param.add(maxPrice);
        }
        log.info("sql={}", sql);
        return this.jdbcTemplate.query(sql, itemRowMapper(), param.toArray());
    }

    /**
     * RowMapper는 db의 반환결과인 ResultSet을 개발자가 원하는 객체로 변환한다. <br>
     * rs => item에 매핑
     * Item객체에 rs.get~~~를 사용하여 Item의 필드에 값을 저장해주고 저장된 값들을 item객체 그대로 반환
     *
     * @return item
     */
    private RowMapper<Item> itemRowMapper() {
        return ((rs, rowNum) -> {
            Item item = new Item();
            item.setId(rs.getLong("id"));
            item.setItemName(rs.getString("item_name"));
            item.setPrice(rs.getInt("price"));
            item.setQuantity(rs.getInt("quantity"));
            return item;
        });
    }
}
